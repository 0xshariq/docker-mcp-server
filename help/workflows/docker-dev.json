{
  "name": "docker-dev",
  "aliases": ["ddev"],
  "category": "Development Workflows",
  "description": "Development-focused Docker operations and environment management",
  "usage": "docker-dev [command] [options]",
  "examples": [
    {
      "command": "ddev start",
      "description": "Start complete development environment"
    },
    {
      "command": "ddev stop",
      "description": "Stop development environment gracefully"
    },
    {
      "command": "ddev restart",
      "description": "Restart development services"
    },
    {
      "command": "ddev build",
      "description": "Build all development images"
    },
    {
      "command": "ddev logs",
      "description": "Show aggregated development logs"
    },
    {
      "command": "ddev shell webapp",
      "description": "Open shell in webapp container"
    },
    {
      "command": "ddev sync",
      "description": "Sync development environment with latest changes"
    },
    {
      "command": "ddev reset",
      "description": "Reset development environment to clean state"
    },
    {
      "command": "ddev --help",
      "description": "Show this help message"
    }
  ],
  "commands": [
    "start - Launch development environment",
    "stop - Gracefully shutdown development services",
    "restart - Restart services with dependency order",
    "build - Build/rebuild development images",
    "logs - Aggregate and tail development logs",
    "shell - Interactive shell access to containers",
    "sync - Synchronize code changes and dependencies",
    "reset - Clean reset of development environment",
    "status - Show development environment status",
    "config - Show development configuration"
  ],
  "options": [
    {
      "flag": "--env <environment>",
      "description": "Specify development environment (local, staging, test)"
    },
    {
      "flag": "--service <service>",
      "description": "Target specific service for operation"
    },
    {
      "flag": "--build-args <args>",
      "description": "Pass build arguments to image builds"
    },
    {
      "flag": "--volumes",
      "description": "Include volume operations in commands"
    },
    {
      "flag": "--no-cache",
      "description": "Build without using cache"
    },
    {
      "flag": "--parallel",
      "description": "Execute operations in parallel when possible"
    },
    {
      "flag": "--watch",
      "description": "Watch for file changes and auto-reload"
    },
    {
      "flag": "--debug",
      "description": "Enable debug mode with verbose logging"
    },
    {
      "flag": "--profile <profile>",
      "description": "Use specific development profile"
    },
    {
      "flag": "-f, --follow",
      "description": "Follow log output (for logs command)"
    },
    {
      "flag": "-h, --help",
      "description": "Show this help message"
    }
  ],
  "development_profiles": [
    {
      "profile": "minimal",
      "description": "Basic services only (database, cache)",
      "services": ["postgres", "redis"]
    },
    {
      "profile": "full",
      "description": "Complete development stack",
      "services": ["webapp", "api", "database", "cache", "queue"]
    },
    {
      "profile": "frontend",
      "description": "Frontend development focus",
      "services": ["webapp", "api-mock", "database"]
    },
    {
      "profile": "backend",
      "description": "Backend development focus",
      "services": ["api", "database", "cache", "queue"]
    },
    {
      "profile": "testing",
      "description": "Testing environment setup",
      "services": ["test-db", "test-api", "selenium"]
    }
  ],
  "workflow_automation": [
    "üîÑ Hot-reload development servers",
    "üèóÔ∏è Automatic dependency installation",
    "üì¶ Code synchronization between host and container",
    "üß™ Test runner integration",
    "üîß Database migration automation",
    "üìä Development metrics collection"
  ],
  "development_features": [
    "üìù Code volume mounting for live editing",
    "üîå Port forwarding for service access",
    "üõ†Ô∏è Development tool integration",
    "üìö Documentation server inclusion",
    "üîç Debug port exposure",
    "üéØ Environment variable management"
  ],
  "service_management": [
    {
      "operation": "Health Checks",
      "description": "Monitor service health and dependencies",
      "command": "ddev status --service webapp"
    },
    {
      "operation": "Log Aggregation",
      "description": "Combined logs from multiple services",
      "command": "ddev logs --follow --service api,webapp"
    },
    {
      "operation": "Shell Access",
      "description": "Interactive access to any service",
      "command": "ddev shell webapp --user developer"
    },
    {
      "operation": "Dependency Management",
      "description": "Service startup order and dependencies",
      "command": "ddev start --wait-for-deps"
    }
  ],
  "integration_examples": [
    {
      "tool": "VS Code",
      "setup": "Remote containers with ddev integration",
      "command": "ddev start --profile full --debug"
    },
    {
      "tool": "IntelliJ",
      "setup": "Docker compose integration",
      "command": "ddev config --export docker-compose.dev.yml"
    },
    {
      "tool": "Jest/Mocha",
      "setup": "Test runner in container",
      "command": "ddev shell test-runner npm test"
    },
    {
      "tool": "Webpack",
      "setup": "Dev server with hot reload",
      "command": "ddev start --watch --service webapp"
    }
  ],
  "environment_variables": [
    "NODE_ENV=development - Node.js environment",
    "DEBUG=* - Enable debug logging",
    "API_URL=http://localhost:3001 - API endpoint",
    "DB_HOST=postgres - Database host",
    "REDIS_URL=redis://redis:6379 - Redis connection"
  ],
  "troubleshooting": [
    {
      "issue": "Port conflicts",
      "solution": "Use --env to switch port mappings",
      "command": "ddev start --env test"
    },
    {
      "issue": "Slow builds",
      "solution": "Enable build caching and parallel builds",
      "command": "ddev build --parallel"
    },
    {
      "issue": "Volume sync issues",
      "solution": "Reset volumes and restart",
      "command": "ddev reset --volumes"
    },
    {
      "issue": "Service dependencies",
      "solution": "Check service startup order",
      "command": "ddev status --dependencies"
    }
  ],
  "best_practices": [
    "‚úÖ Use profiles to minimize resource usage",
    "‚úÖ Enable watch mode for active development",
    "‚úÖ Regularly sync dependencies and code",
    "‚úÖ Use debug mode for troubleshooting",
    "‚ùå Don't run full profile on resource-limited machines"
  ],
  "notes": [
    "üí° Designed specifically for development workflows",
    "üîß Integrates with common development tools",
    "üìä Provides development environment monitoring",
    "‚ö° Optimized for fast iteration cycles",
    "üéØ Supports multiple development profiles"
  ]
}
